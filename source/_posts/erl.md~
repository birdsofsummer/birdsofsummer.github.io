

### pattern

```erlang

{P1,P2,...,Pn}={T1,T2,...,Tn}
{P,abcd}={123,abcd}.
[H|T]=[79,116].


{P,abc,123} when    P == G,...
                    X > Y
                    X < Y
                    X =< Y
                    X >= Y
                    X == Y
                    X /= Y
                    X =:= Y
                    X =/= Y

{X,a,X,[B|X]} 
%{X,a,F1,[B|F2]} when F1==X, F2==X

```
### function

    F(P11,...,P1N) when G11,...,G1N -> Body1;
    F(P21,...,P2N) when G11,...,G1N -> Body2;
    ....
    F(PK1, PK2, ..., PKN) -> BodyK.

```erlang

factorial(0) -> 1;
factorial(N) -> N * factorial(N-1).


member(H, [H|T]) -> true;
%member(H, [H1|_]) when H == H1 -> true;
member(H, [_|T] -> member(H, T);
member(H, []) -> false.

%%member(dog, [cat,man,dog,ape]) 


deposit(Who, Money) ->
Old = lookup(Who),
New = Old + Money,
insert(Who, New),
New.

%%deposit(joe, 25)

```
### tail-recursive

    fn(X1,Tails...)
    fn(X2,Tails...)
    fn(X3,Tails...)

```erlang

factorial(0) -> 1;
factorial(N) -> N * factorial(N-1).



%%tail
factorial(N) -> factorial_1(N, 1).
factorial_1(0, X) -> X;
factorial_1(N, X) -> factorial_1(N-1, N*X).


loop(Dict) ->
    receive
        {store, Key, Value} -> loop(dict:store(Key, Value, Dict));
        {From, {get, Key}} -> From ! dict:fetch(Key, Dict), loop(Dict)
    end.


```
### case

    case Expression of
    Pattern1 -> Expr_seq1;
    Pattern2 -> Expr_seq2;
    ...
    end


### if

    if
        Guard1 ->
            Expr_seq1;
        Guard2 ->
            Expr_seq2;
        ...
    end

### Higher order functions

    F=fun(I) -> ...I end
    map(F, [H|T]) -> [F(H)|map(F, T)];
    map(F, []) -> [].

```erlang
    lists:map(fun(I) -> 2 *I end, [1,2,3,4]).


    for(I, Max, F, Sum) when I < Max -> for(I+1, Max, F, Sum + F(I));
    for(I, Max, F, Sum) -> Sum.
    Sum0 = 0,Sum = for(0, Max, F, Sum0).
    %curry
    %f(X1)->f(X2)->...end end

    Adder = fun(X) -> fun(Y) -> X + Y end end.
    Adder10 = Adder(10).
    Adder10(5).

    % lambda
    Fact = fun(X) ->
                G = fun(0,F) -> 1;
                        (N, F) -> N*F(N-1,F)
                    end,
                G(X, G)
            end.
    Fact(4)


    X = fun foo/2 
    %X = fun(I, J) -> foo(I, J) end 








```
### list

    [X || Qualifier1, Qualifier2, ...]

```erlang

    qsort([]) -> [];
    qsort([Pivot|T]) ->
    qsort([X||X<-T,X =< Pivot]) ++ [Pivot] ++ qsort([X||X<-T,X > Pivot]).  % =<

    perms([]) -> [[]];
    perms(L) -> [[H|T] || H <- L, T <- perms(L--[H])].

   % perms("123").
   % ["123","132","213","231","312","321"]

```


### binary

```erlang
B1=list_to_binary([1,2,3]).
B2=list_to_binary([4,5,[6,7],[],[8,[9]],245]).
B3=concat_binary([B1,B2]).
split_binary(B3,6).
B = term_to_binary({hello,"joe"}).
binary_to_term(B).
```
### bit

<<Value:Size/TypeSpecifierList>>
            End-Sign-Type-Unit
            big/little/native - signed/unsigned - integer/float/binary - 1..256


```erlang
X=1,Y1=1,Y2=255,Y3=256,Z=1.
<<X,Y1,Z>>.
<<X,Y2,Z>>.
<<X,Y3,Z>>.
<<X,Y3:16,Z>>.
<<X,Y3:32,Z>>.
<<256:32>>.
<<256:32/big>>.
<<256:32/little>>.
<<1:1,2:7>>.
<<X:1,Y:7>> = <<130>>.
X.
Y.

-define(IP_VERSION, 4).
-define(IP_MIN_HDR_LEN, 5).
%...
DgramSize = size(Dgram),
case Dgram of
    <<?IP_VERSION:4, HLen:4, SrvcType:8, TotLen:16,
    ID:16, Flgs:3, FragOff:13,
    TTL:8, Proto:8, HdrChkSum:16,
    SrcIP:32,
    DestIP:32, RestDgram/binary>> when HLen >= 5, 4*HLen =< DgramSize ->
        OptsLen = 4*(HLen - ?IP_MIN_HDR_LEN),
        <<Opts:OptsLen/binary,Data/binary>> = RestDgram,
        %...

```
### Records

-record(Name, {
                Key1 = Default1,
                Key2 = Default2,
                ...
              }).

```erlang
-record(person, {
                firstName="",
                lastName = "",
                age}).


Person = #person{
                    firstName="Rip",
                    lastname="Van Winkle",
                    age=793
                }


birthday(X=#person{age=N}) -> X#person{age=N+1}.


```

### Macros 

```erlang
    -define(Constant, Replacement).
    -define(Func(Var1, Var2,.., Var), Replacement).

    -define(macro1(X, Y), {a, X, Y}).
    -define(start, {).
    -define(stop, }).


    foo(A) ->
        ?macro1(A+10, b) 
        %{a,A+10,b}. 
    foo(A) ->
    ?start,a,?stop. %{...}

    ?FILE
    ?MODULE
    ?LINE
```

### Include files
```erlang

-include(Filename).
-include_lib(Name).
-include_lib("kernel/include/file.hrl").


```

### module
```erlang
-module(math).
-export([areas/1]).  %% math:areas(...)
-import(lists, [map/2]). %% lists:map

areas(L) -> lists:sum( map( fun(I) -> area(I) end, L)). 
area({square, X}) -> X*X;
area({rectangle,X,Y}) -> X*Y.
```

```shell
erl
c(math).
math : areas([{rectangle, 12, 4}, {square, 6}]).
```
application                          application_controller               
application_master                   atomics                              
beam_lib                             binary                               
c                                    code                                 
code_server                          counters                             
dict                                 edlin                                
edlin_expand                         epp                                  
erl_abstract_code                    erl_anno                             
erl_distribution                     erl_eval                             
erl_lint                             erl_parse                            
erl_prim_loader                      erl_scan                             
erl_signal_handler                   erl_tracer                           
erlang                               error_handler                        
error_logger                         erts_code_purger                     
erts_dirty_process_signal_handler    erts_internal                        
erts_literal_area_collector          ets                                  
file                                 file_io_server                       
file_server                          filename                             
gb_sets                              gb_trees                             
gen                                  gen_event                            
gen_server                           global                               
global_group                         group                                
group_history                        heart                                
hipe_unified_loader                  inet                                 
inet_config                          inet_db                              
inet_gethost_native                  inet_parse                           
inet_udp                             init                                 
io                                   io_lib                               
io_lib_format                        io_lib_pretty                        
kernel                               kernel_config                        
kernel_refc                          lists                                
logger                               logger_backend                       
logger_config                        logger_filters                       
logger_formatter                     logger_h_common                      
logger_handler_watcher               logger_server                        
logger_simple_h                      logger_std_h                         
logger_sup                           maps                                 
net_kernel                           orddict                              
ordsets                              os                                   
otp_ring0                            persistent_term                      
prim_buffer                          prim_eval                            
prim_file                            prim_inet                            
prim_zip                             proc_lib                             
proplists                            queue                                
ram_file                             raw_file_io                          
raw_file_io_raw                      rpc                                  
sets                                 shell                                
standard_error                       string                               
supervisor                           supervisor_bridge                    
timer                                unicode                              
unicode_util                         user_drv                             
user_sup                             zlib

lists:
all/2          any/2          append/1       append/2       concat/1       
delete/2      droplast/1     dropwhile/2    duplicate/2    filter/2       
filtermap/2   flatlength/1   flatmap/2      flatten/1      flatten/2      
foldl/3        foldr/3        foreach/2      join/2         keydelete/3    
keyfind/3      keymap/3       keymember/3    keymerge/3     keyreplace/4   
keysearch/3    keysort/2      keystore/4     keytake/3      last/1         
map/2          mapfoldl/3     mapfoldr/3     max/1          member/2       
merge/1        merge/2        merge/3        merge3/3       min/1          
module_info/0  module_info/1  nth/2          nthtail/2      partition/2    
prefix/2       reverse/1      reverse/2      rkeymerge/3    rmerge/2       
rmerge/3       rmerge3/3      rukeymerge/3   rumerge/2      rumerge/3      
rumerge3/3     search/2       seq/2          seq/3          sort/1         
sort/2         split/2        splitwith/2    sublist/2      sublist/3      
subtract/2     suffix/2       sum/1          takewhile/2    ukeymerge/3    
ukeysort/2     umerge/1       umerge/2       umerge/3       umerge3/3      
unzip/1        unzip3/1       usort/1        usort/2        zf/2           
zip/2          zip3/3         zipwith/3      zipwith3/4     

string: 
casefold/1         centre/2           centre/3           chars/2            
chars/3            chomp/1            chr/2              concat/2           
copies/2           cspan/2            equal/2            equal/3            
equal/4            find/2             find/3             is_empty/1         
join/2             left/2             left/3             len/1              
length/1           lexemes/2          list_to_float/1    list_to_integer/1  
lowercase/1        module_info/0      module_info/1      next_codepoint/1   
next_grapheme/1    nth_lexeme/3       pad/2              pad/3              
pad/4              prefix/2           rchr/2             replace/3          
replace/4          reverse/1          right/2            right/3            
rstr/2             slice/2            slice/3            span/2             
split/2            split/3            str/2              strip/1            
strip/2            strip/3            sub_string/2       sub_string/3       
sub_word/2         sub_word/3         substr/2           substr/3           
take/2             take/3             take/4             titlecase/1        
to_float/1         to_graphemes/1     to_integer/1       to_lower/1         
to_upper/1         tokens/2           trim/1             trim/2             
trim/3             uppercase/1        words/1            words/2            

file:
advise/4                  allocate/3                altname/1                 
change_group/2            change_mode/2             change_owner/2            
change_owner/3            change_time/2             change_time/3             
close/1                   consult/1                 copy/2                    
copy/3                    copy_opened/3             datasync/1                
del_dir/1                 delete/1                  eval/1                    
eval/2                    format_error/1            get_cwd/0                 
get_cwd/1                 ipread_s32bu_p32bu/3      ipread_s32bu_p32bu_int/3  
list_dir/1                list_dir_all/1            make_dir/1                
make_link/2               make_symlink/2            module_info/0             
module_info/1             native_name_encoding/0    open/2                    
path_consult/2            path_eval/2               path_eval/3               
path_open/3               path_script/2             path_script/3             
pid2name/1                position/2                pread/2                   
pread/3                   pwrite/2                  pwrite/3                  
raw_read_file_info/1      raw_write_file_info/2     read/2                    
read_file/1               read_file_info/1          read_file_info/2          
read_line/1               read_link/1               read_link_all/1           
read_link_info/1          read_link_info/2          rename/2                  
script/1                  script/2                  sendfile/2                
sendfile/5                set_cwd/1                 sync/1                    
truncate/1                write/2                   write_file/2              
write_file/3              write_file_info/2         write_file_info/3         


sets:
add_element/2   del_element/2   filter/2        fold/3          
from_list/1     intersection/1  intersection/2  is_disjoint/2   
is_element/2    is_empty/1      is_set/1        is_subset/2     
module_info/0   module_info/1   new/0           size/1          
subtract/2      to_list/1       union/1         union/2

maps:
filter/2       find/2         fold/3         from_list/1    get/2          
get/3          is_key/2       iterator/1     keys/1         map/2          
merge/2        module_info/0  module_info/1  new/0          next/1         
put/3          remove/2       size/1         take/2         to_list/1      
update/3       update_with/3  update_with/4  values/1       with/2

os:  
cmd/1              cmd/2              find_executable/1  find_executable/2  
get_env_var/1      getenv/0           getenv/1           getenv/2           
getpid/0           list_env_vars/0    module_info/0      module_info/1      
perf_counter/0     perf_counter/1     putenv/2           set_env_var/2      
set_signal/2       system_time/0      system_time/1      timestamp/0        
type/0             unset_env_var/1    unsetenv/1         version/0      



## Concurrent 

Pid = spawn(F)
